// Code generated by mockery v1.0.0. DO NOT EDIT.

package service

import (
	context "context"

	model "github.com/postmanq/postmanq/module/queue/model"
	mock "github.com/stretchr/testify/mock"

	service "github.com/postmanq/postmanq/module/queue/service"
)

// Pool is an autogenerated mock type for the Pool type
type Pool struct {
	mock.Mock
}

// Connect provides a mock function with given fields: _a0
func (_m *Pool) Connect(_a0 []string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreatePublisher provides a mock function with given fields: _a0, _a1
func (_m *Pool) CreatePublisher(_a0 context.Context, _a1 model.Exchange) (service.Publisher, error) {
	ret := _m.Called(_a0, _a1)

	var r0 service.Publisher
	if rf, ok := ret.Get(0).(func(context.Context, model.Exchange) service.Publisher); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.Publisher)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.Exchange) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSubscriber provides a mock function with given fields: _a0, _a1
func (_m *Pool) CreateSubscriber(_a0 context.Context, _a1 model.Queue) (service.Subscriber, error) {
	ret := _m.Called(_a0, _a1)

	var r0 service.Subscriber
	if rf, ok := ret.Get(0).(func(context.Context, model.Queue) service.Subscriber); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.Subscriber)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.Queue) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
