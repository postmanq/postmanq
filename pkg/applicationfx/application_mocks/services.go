// Code generated by MockGen. DO NOT EDIT.
// Source: application/services.go
//
// Generated by this command:
//
//	mockgen -source application/services.go -destination application_mocks/services.go
//
// Package mock_application is a generated GoMock package.
package mock_application

import (
	context "context"
	"github.com/postmanq/postmanq/pkg/applicationfx/application"
	reflect "reflect"

	rxgo "github.com/reactivex/rxgo/v2"
	gomock "go.uber.org/mock/gomock"
)

// MockApplication is a mock of Application interface.
type MockApplication struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationMockRecorder
}

// MockApplicationMockRecorder is the mock recorder for MockApplication.
type MockApplicationMockRecorder struct {
	mock *MockApplication
}

// NewMockApplication creates a new mock instance.
func NewMockApplication(ctrl *gomock.Controller) *MockApplication {
	mock := &MockApplication{ctrl: ctrl}
	mock.recorder = &MockApplicationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplication) EXPECT() *MockApplicationMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockApplication) Run(invoker any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run", invoker)
}

// Run indicates an expected call of Run.
func (mr *MockApplicationMockRecorder) Run(invoker any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockApplication)(nil).Run), invoker)
}

// MockPlugin is a mock of Plugin interface.
type MockPlugin struct {
	ctrl     *gomock.Controller
	recorder *MockPluginMockRecorder
}

// MockPluginMockRecorder is the mock recorder for MockPlugin.
type MockPluginMockRecorder struct {
	mock *MockPlugin
}

// NewMockPlugin creates a new mock instance.
func NewMockPlugin(ctrl *gomock.Controller) *MockPlugin {
	mock := &MockPlugin{ctrl: ctrl}
	mock.recorder = &MockPluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlugin) EXPECT() *MockPluginMockRecorder {
	return m.recorder
}

// GetKind mocks base method.
func (m *MockPlugin) GetKind() application.PluginKind {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKind")
	ret0, _ := ret[0].(application.PluginKind)
	return ret0
}

// GetKind indicates an expected call of GetKind.
func (mr *MockPluginMockRecorder) GetKind() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKind", reflect.TypeOf((*MockPlugin)(nil).GetKind))
}

// OnReceive mocks base method.
func (m *MockPlugin) OnReceive(ctx context.Context, next chan<- rxgo.Item) (rxgo.Observable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnReceive", ctx, next)
	ret0, _ := ret[0].(rxgo.Observable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OnReceive indicates an expected call of OnReceive.
func (mr *MockPluginMockRecorder) OnReceive(ctx, next any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnReceive", reflect.TypeOf((*MockPlugin)(nil).OnReceive), ctx, next)
}

// OnSend mocks base method.
func (m *MockPlugin) OnSend(ctx context.Context, item rxgo.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnSend", ctx, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnSend indicates an expected call of OnSend.
func (mr *MockPluginMockRecorder) OnSend(ctx, item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnSend", reflect.TypeOf((*MockPlugin)(nil).OnSend), ctx, item)
}
