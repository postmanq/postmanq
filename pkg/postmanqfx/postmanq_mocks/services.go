// Code generated by MockGen. DO NOT EDIT.
// Source: postmanq/services.go
//
// Generated by this command:
//
//	mockgen -source postmanq/services.go -destination postmanq_mocks/services.go
//
// Package mock_postmanq is a generated GoMock package.
package mock_postmanq

import (
	context "context"
	"github.com/postmanq/postmanq/pkg/commonfx/gen/postmanqv1"
	"github.com/postmanq/postmanq/pkg/commonfx/temporalfx/temporal"
	reflect "reflect"

	postmanq "github.com/postmanq/postmanq/pkg/postmanqfx/postmanq"
	workflow "go.temporal.io/sdk/workflow"
	gomock "go.uber.org/mock/gomock"
)

// MockPlugin is a mock of Plugin interface.
type MockPlugin struct {
	ctrl     *gomock.Controller
	recorder *MockPluginMockRecorder
}

// MockPluginMockRecorder is the mock recorder for MockPlugin.
type MockPluginMockRecorder struct {
	mock *MockPlugin
}

// NewMockPlugin creates a new mock instance.
func NewMockPlugin(ctrl *gomock.Controller) *MockPlugin {
	mock := &MockPlugin{ctrl: ctrl}
	mock.recorder = &MockPluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlugin) EXPECT() *MockPluginMockRecorder {
	return m.recorder
}

// MockReceiverPlugin is a mock of ReceiverPlugin interface.
type MockReceiverPlugin struct {
	ctrl     *gomock.Controller
	recorder *MockReceiverPluginMockRecorder
}

// MockReceiverPluginMockRecorder is the mock recorder for MockReceiverPlugin.
type MockReceiverPluginMockRecorder struct {
	mock *MockReceiverPlugin
}

// NewMockReceiverPlugin creates a new mock instance.
func NewMockReceiverPlugin(ctrl *gomock.Controller) *MockReceiverPlugin {
	mock := &MockReceiverPlugin{ctrl: ctrl}
	mock.recorder = &MockReceiverPluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReceiverPlugin) EXPECT() *MockReceiverPluginMockRecorder {
	return m.recorder
}

// Receive mocks base method.
func (m *MockReceiverPlugin) Receive(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Receive", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Receive indicates an expected call of Receive.
func (mr *MockReceiverPluginMockRecorder) Receive(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Receive", reflect.TypeOf((*MockReceiverPlugin)(nil).Receive), ctx)
}

// MockWorkflowPlugin is a mock of WorkflowPlugin interface.
type MockWorkflowPlugin struct {
	ctrl     *gomock.Controller
	recorder *MockWorkflowPluginMockRecorder
}

// MockWorkflowPluginMockRecorder is the mock recorder for MockWorkflowPlugin.
type MockWorkflowPluginMockRecorder struct {
	mock *MockWorkflowPlugin
}

// NewMockWorkflowPlugin creates a new mock instance.
func NewMockWorkflowPlugin(ctrl *gomock.Controller) *MockWorkflowPlugin {
	mock := &MockWorkflowPlugin{ctrl: ctrl}
	mock.recorder = &MockWorkflowPluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkflowPlugin) EXPECT() *MockWorkflowPluginMockRecorder {
	return m.recorder
}

// GetActivityDescriptor mocks base method.
func (m *MockWorkflowPlugin) GetActivityDescriptor() temporal.ActivityDescriptor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActivityDescriptor")
	ret0, _ := ret[0].(temporal.ActivityDescriptor)
	return ret0
}

// GetActivityDescriptor indicates an expected call of GetActivityDescriptor.
func (mr *MockWorkflowPluginMockRecorder) GetActivityDescriptor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActivityDescriptor", reflect.TypeOf((*MockWorkflowPlugin)(nil).GetActivityDescriptor))
}

// MockEventSenderFactory is a mock of EventSenderFactory interface.
type MockEventSenderFactory struct {
	ctrl     *gomock.Controller
	recorder *MockEventSenderFactoryMockRecorder
}

// MockEventSenderFactoryMockRecorder is the mock recorder for MockEventSenderFactory.
type MockEventSenderFactoryMockRecorder struct {
	mock *MockEventSenderFactory
}

// NewMockEventSenderFactory creates a new mock instance.
func NewMockEventSenderFactory(ctrl *gomock.Controller) *MockEventSenderFactory {
	mock := &MockEventSenderFactory{ctrl: ctrl}
	mock.recorder = &MockEventSenderFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventSenderFactory) EXPECT() *MockEventSenderFactoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockEventSenderFactory) Create(pipeline *postmanq.Pipeline) postmanq.EventSender {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", pipeline)
	ret0, _ := ret[0].(postmanq.EventSender)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockEventSenderFactoryMockRecorder) Create(pipeline any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockEventSenderFactory)(nil).Create), pipeline)
}

// MockEventSender is a mock of EventSender interface.
type MockEventSender struct {
	ctrl     *gomock.Controller
	recorder *MockEventSenderMockRecorder
}

// MockEventSenderMockRecorder is the mock recorder for MockEventSender.
type MockEventSenderMockRecorder struct {
	mock *MockEventSender
}

// NewMockEventSender creates a new mock instance.
func NewMockEventSender(ctrl *gomock.Controller) *MockEventSender {
	mock := &MockEventSender{ctrl: ctrl}
	mock.recorder = &MockEventSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventSender) EXPECT() *MockEventSenderMockRecorder {
	return m.recorder
}

// SendEvent mocks base method.
func (m *MockEventSender) SendEvent(ctx workflow.Context, event *postmanqv1.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEvent", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEvent indicates an expected call of SendEvent.
func (mr *MockEventSenderMockRecorder) SendEvent(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEvent", reflect.TypeOf((*MockEventSender)(nil).SendEvent), ctx, event)
}

// MockInvoker is a mock of Invoker interface.
type MockInvoker struct {
	ctrl     *gomock.Controller
	recorder *MockInvokerMockRecorder
}

// MockInvokerMockRecorder is the mock recorder for MockInvoker.
type MockInvokerMockRecorder struct {
	mock *MockInvoker
}

// NewMockInvoker creates a new mock instance.
func NewMockInvoker(ctrl *gomock.Controller) *MockInvoker {
	mock := &MockInvoker{ctrl: ctrl}
	mock.recorder = &MockInvokerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInvoker) EXPECT() *MockInvokerMockRecorder {
	return m.recorder
}

// Configure mocks base method.
func (m *MockInvoker) Configure() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Configure")
	ret0, _ := ret[0].(error)
	return ret0
}

// Configure indicates an expected call of Configure.
func (mr *MockInvokerMockRecorder) Configure() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*MockInvoker)(nil).Configure))
}

// Run mocks base method.
func (m *MockInvoker) Run(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockInvokerMockRecorder) Run(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockInvoker)(nil).Run), ctx)
}
