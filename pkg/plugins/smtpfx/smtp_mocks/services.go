// Code generated by MockGen. DO NOT EDIT.
// Source: smtp/services.go
//
// Generated by this command:
//
//	mockgen -source smtp/services.go -package smtp_mocks -destination smtp_mocks/services.go
//

// Package smtp_mocks is a generated GoMock package.
package smtp_mocks

import (
	context "context"
	reflect "reflect"

	collection "github.com/postmanq/postmanq/pkg/commonfx/collection"
	smtp "github.com/postmanq/postmanq/pkg/plugins/smtpfx/smtp"
	gomock "go.uber.org/mock/gomock"
)

// MockMxResolver is a mock of MxResolver interface.
type MockMxResolver struct {
	ctrl     *gomock.Controller
	recorder *MockMxResolverMockRecorder
}

// MockMxResolverMockRecorder is the mock recorder for MockMxResolver.
type MockMxResolverMockRecorder struct {
	mock *MockMxResolver
}

// NewMockMxResolver creates a new mock instance.
func NewMockMxResolver(ctrl *gomock.Controller) *MockMxResolver {
	mock := &MockMxResolver{ctrl: ctrl}
	mock.recorder = &MockMxResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMxResolver) EXPECT() *MockMxResolverMockRecorder {
	return m.recorder
}

// Resolve mocks base method.
func (m *MockMxResolver) Resolve(ctx context.Context, domain string) (collection.Slice[smtp.MxRecord], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resolve", ctx, domain)
	ret0, _ := ret[0].(collection.Slice[smtp.MxRecord])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Resolve indicates an expected call of Resolve.
func (mr *MockMxResolverMockRecorder) Resolve(ctx, domain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*MockMxResolver)(nil).Resolve), ctx, domain)
}
